<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.API</name>
    </assembly>
    <members>
        <member name="M:Dapper.API.Configure.CreateToken.CreateTokenMethod(System.String,Dapper.API.Models.TokenData)">
            <summary>
            User specific token
            </summary>
            <param name="userId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Configure.CreateToken.CreateTokenMethod(System.String,System.Nullable{System.Int32},Dapper.API.Models.TokenData)">
            <summary>
            Device specific token
            </summary>
            <param name="userId"></param>
            <param name="deviceId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Configure.ICreateToken">
            <summary>
            Interface for token creation and validation operations.
            Provides methods to create, read, and validate JWT tokens for authentication and authorization.
            </summary>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.CreateTokenMethod(System.String,Dapper.API.Models.TokenData)">
            <summary>
            Creates a JWT token for a user with optional custom claims data.
            </summary>
            <param name="userId">The unique identifier of the user for whom the token is created.</param>
            <param name="data">Optional additional data to include in the token claims.</param>
            <returns>A JWT token string that can be used for authentication.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.CreateTokenMethod(System.String,System.Nullable{System.Int32},Dapper.API.Models.TokenData)">
            <summary>
            Creates a JWT token for a user on a specific device with optional custom claims data.
            Useful for scenarios requiring device-specific authentication.
            </summary>
            <param name="userId">The unique identifier of the user for whom the token is created.</param>
            <param name="deviceId">The identifier of the device from which the user is authenticating.</param>
            <param name="data">Optional additional data to include in the token claims.</param>
            <returns>A JWT token string that can be used for authentication.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.GetPrincipal(System.String)">
            <summary>
            Extracts the claims principal from a JWT token.
            This can be used to access the claims within the token for authorization decisions.
            </summary>
            <param name="token">The JWT token string to parse.</param>
            <returns>A ClaimsPrincipal object containing the claims from the token.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.ReadToken(System.String)">
            <summary>
            Decodes a JWT token to access its raw information without validating it.
            </summary>
            <param name="token">The JWT token string to read.</param>
            <returns>A JwtSecurityToken object representing the decoded token.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.ValidateToken(System.String)">
            <summary>
            Validates a JWT token to ensure it is properly signed and not expired.
            </summary>
            <param name="token">The JWT token string to validate.</param>
            <returns>
            A tuple containing:
            - isValid: Boolean indicating if the token is valid
            - userId: The user ID extracted from the token if valid
            </returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotels(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all hotels
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotelById(System.Int32)">
            <summary>
            Get hotel by id
            </summary>
            <param name="hotelId"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotelByName(System.String)">
            <summary>
            Get hotel by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.AddHotel(Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Create a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.UpdateHotel(System.Int32,Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Update hotel by id
            </summary>
            <param name="hotelId"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.DeleteHotelById(System.Int32)">
            <summary>
            Delete hotel by id
            </summary>
            <param name="hotelId"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Dapper.DapperHandler.QueryMultipleAsync(System.String,Dapper.DynamicParameters,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query that returns multiple result sets
            </summary>
            <param name="sql">The SQL query to execute</param>
            <param name="parameters">The parameters for the query</param>
            <param name="connectionName">Optional connection string name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A grid reader for accessing multiple result sets</returns>
        </member>
        <member name="M:Dapper.API.Data.Dapper.IDapperHandler.QueryMultipleAsync(System.String,Dapper.DynamicParameters,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query that returns multiple result sets
            </summary>
            <param name="sql">The SQL query to execute</param>
            <param name="param">The parameters for the query</param>
            <param name="conString">Optional connection string name</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>A GridReader for reading multiple result sets</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.AddHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.DeleteHotel(System.Int32)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetAll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets paginated list of hotels
            </summary>
            <param name="page">Current page (1-based indexing)</param>
            <param name="pageSize">Number of records per page</param>
            <param name="cancellationToken">Cancellation token for async operations</param>
            <returns>Paginated result containing hotels and metadata</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetHotelById(System.Int32)">
            <summary>
            Get a hotel by it's id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetHotelByName(System.String)">
            <summary>
            Get a hotel by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.UpdateHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Update a hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Data.Repositories.Interfaces.IHotelRepository">
            <summary>
            Repository Interface for the hotels
            </summary>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.AddHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetAll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets paginated list of hotels
            </summary>
            <param name="page">Current page (1-based indexing)</param>
            <param name="pageSize">Number of records per page</param>
            <param name="cancellationToken">Cancellation token for async operations</param>
            <returns>Paginated result containing hotels and metadata</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.DeleteHotel(System.Int32)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelById(System.Int32)">
            <summary>
            Get a hotel by it's id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelByName(System.String)">
            <summary>
            Get a hotel by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelByNameAndAddress(System.String,System.String)">
            <summary>
            Get a hotel by it's name and address for uniqueness
            </summary>
            <param name="name"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.UpdateHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Update a hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Dtos.Common.BaseModel">
            <summary>
            Base model for dtos
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.Id">
            <summary>
            Numeric Id of the entity/model
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.EntityStatusId">
            <summary>
            The status of the entity
            1 = Active, 2 = Inactive, 3 = DeletedForEveryone, 4 = Pending, 5 = Archived, 6 = Suspended, 7 = DeletedForMe
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.CreatedAt">
            <summary>
            The datetime the record was created
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Hotels.AddEditHotel">
            <summary>
            Use for adding or editing a hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Hotels.Hotel">
            <summary>
            Represents a hotel data transfer object.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.Common.BaseModel">
            <summary>
            Contains common properties for all entities
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.Id">
            <summary>
            Numeric Id of the entity/model
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.EntityStatusId">
            <summary>
            The status of the entity
            1 = Active, 2 = Inactive, 3 = DeletedForEveryone, 4 = Pending, 5 = Archived, 6 = Suspended, 7 = DeletedForMe
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.CreatedAt">
            <summary>
            The datetime the record was created
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.CreatedBy">
            <summary>
            The person who created the record
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.UpdatedAt">
            <summary>
            The datetime the record was updated
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.UpdatedBy">
            <summary>
            The person who last updated the record
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.HotelEntity">
            <summary>
            Represents a hotel entity.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Enums.SystemCodeEnum">
            <summary>
            Allows developer to create error codes for system logic in a central place
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCreated">
            <summary>
            Hotel created successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelUpdated">
            <summary>
            Hotel updated successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelDeleted">
            <summary>
            Hotel deleted successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCreationFailed">
            <summary>
            Hotel creation failed
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelNotFound">
            <summary>
            Hotel not found
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelAlreadyExists">
            <summary>
            Hotel already exists
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidHotelData">
            <summary>
            Invalid hotel data
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelHasActiveRooms">
            <summary>
            Unable to delete hotel with active rooms
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidHotelContactInfo">
            <summary>
            Invalid hotel contact information
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCapacityExceeded">
            <summary>
            Hotel capacity exceeded
            </summary>
        </member>
        <member name="T:Dapper.API.Exceptions.BaseException">
            <summary>
            Base exception for all exceptions 
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.ErrorCode">
            <summary>
            The error code for the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.Component">
            <summary>
            The component that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.Function">
            <summary>
            The function that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.TraceId">
            <summary>
            The trace ID for the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.AdditionalData">
            <summary>
            Optional additional data for the exception
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.BaseException.#ctor(System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to create an instance of the AuthBaseException
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="component"></param>
            <param name="function"></param>
            <param name="innerException"></param>
            <param name="additionalData"></param>
        </member>
        <member name="T:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException">
            <summary>
            Exception thrown when data access operations fail at the database level
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.Operation">
            <summary>
            Gets the database operation that failed
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor">
            <summary>
            Initializes a new instance of the DataAccessException class
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataAccessException class with operation information
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="operation">The database operation that failed</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataAccessException class with serialized data
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data</param>
            <param name="context">The StreamingContext that contains contextual information</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data</param>
            <param name="context">The StreamingContext that contains contextual information</param>
        </member>
        <member name="T:Dapper.API.Exceptions.RepositoryException">
            <summary>
            Repository Layer Exceptions
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.RepositoryException.Repository">
            <summary>
            The repository that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.RepositoryException.Operation">
            <summary>
            The operation that the exception occurred in
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.RepositoryException.#ctor(System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to create an instance of the RepositoryException
            </summary>
            <param name="message"></param>
            <param name="repository"></param>
            <param name="function"></param>
            <param name="operation"></param>
            <param name="innerException"></param>
            <param name="additionalData"></param>
        </member>
        <member name="T:Dapper.API.Exceptions.ValidationException">
            <summary>
            Validation exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.ValidationException.Errors">
            <summary>
            The validation errors
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.ValidationException.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Dapper.API.Models.ValidationError},System.Exception)">
            <summary>
            Used to create a new instance of the <see cref="T:Dapper.API.Exceptions.ValidationException"/> class
            </summary>
            <param name="message"></param>
            <param name="validator"></param>
            <param name="function"></param>
            <param name="errors"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Dapper.API.Helpers.DateTimeHelper">
            <summary>
            Helper class for date and time operations
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.GetCurrentTimestamp">
            <summary>
            Converts the current date and time to a Unix timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.TimestampToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp to a DateTime object
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.FormatDateTimeInvariant(System.DateTime)">
            <summary>
            Formats a DateTime object to a string in the format "yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Helpers.IHelperFunctions">
            <summary>
            Represents the helper functions
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.IHelperFunctions.ProcessValidation``2(FluentValidation.AbstractValidator{``0},``0,Dapper.API.Models.Response{``1})">
            <summary>
            Used for model validation
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="validator"></param>
            <param name="obj"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Models.ErrorDetail">
            <summary>
            Provides detailed information about an error that occurred in the application.
            Used for structured error responses in API calls.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Code">
            <summary>
            A unique code identifying the error type, often corresponding to system error codes.
            Can be used for error classification and client-side handling logic.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Message">
            <summary>
            A human-readable description of the error.
            Should be clear and informative without exposing sensitive system details.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Component">
            <summary>
            The component or module where the error occurred.
            Helps in identifying the subsystem responsible for the error.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Function">
            <summary>
            The specific function or operation that was being performed when the error occurred.
            Provides context for where in the execution flow the error happened.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.AdditionalData">
            <summary>
            A dictionary containing additional context-specific information about the error.
            Can include timestamps, request IDs, or other diagnostic information.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.ValidationErrors">
            <summary>
            A collection of validation errors when the error is related to invalid input.
            Each error specifies which property failed validation and why.
            Only populated for validation-related errors.
            </summary>
        </member>
        <member name="T:Dapper.API.Models.ErrorResponse">
            <summary>
            Error response model
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorResponse.Error">
            <summary>
            Error details
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Pagination.PaginatedResult`1">
            <summary>
            Represents a paginated collection of items with metadata
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
        </member>
        <member name="M:Dapper.API.Models.Pagination.PaginatedResult`1.#ctor(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PaginatedResult class
            </summary>
            <param name="items">The items on the current page</param>
            <param name="totalCount">The total number of items across all pages</param>
            <param name="page">The current page (1-based)</param>
            <param name="pageSize">The number of items per page</param>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.Items">
            <summary>
            The items on the current page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.Page">
            <summary>
            The current page number (1-based)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.PageSize">
            <summary>
            The number of items per page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.TotalCount">
            <summary>
            The total number of items across all pages
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.TotalPages">
            <summary>
            The total number of pages
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.HasNextPage">
            <summary>
            Whether there is a page after the current page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.HasPreviousPage">
            <summary>
            Whether there is a page before the current page
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Response">
            <summary>
            Response wrapper for API Endpoints
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.IsSuccess">
            <summary>
            是否成功回傳
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.ErrorMessage">
            <summary>
            IsSuccess為false，顯示錯誤訊息
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.SuccessMessage">
            <summary>
            IsSuccess為true，顯示訊息
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.ErrorCode">
            <summary>
            Custom error code
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.StatusCode">
            <summary>
            Http Status Code
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Response`1">
            <summary>
            回傳資料格式，泛型
            </summary>
            <typeparam name="T">資料內容</typeparam>
        </member>
        <member name="P:Dapper.API.Models.Response`1.Content">
            <summary>
            資料內容
            </summary>
        </member>
        <member name="T:Dapper.API.Models.TokenData">
            <summary>
            Properties returned in the token
            </summary>
        </member>
        <member name="P:Dapper.API.Models.TokenData.Email">
            <summary>
            Gets or sets the user's email address. This is often used as the username for login.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.TokenData.AdditionalProperties">
            <summary>
            Adtional properties that can be added to the token.
            </summary>
        </member>
        <member name="T:Dapper.API.Models.ValidationError">
            <summary>
            Represents a validation error for a specific property in a model or entity.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.Property">
            <summary>
            The name of the property that failed validation.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.Error">
            <summary>
            The validation error message describing why the property is invalid.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.AttemptedValue">
            <summary>
            The value that was attempted to be assigned to the property but failed validation.
            This helps in debugging by showing what was actually submitted.
            </summary>
        </member>
        <member name="T:Dapper.API.Services.Interfaces.IHotelService">
            <summary>
            Hotel Service Interface
            </summary>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.AddHotel(Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetAll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets paginated list of hotels
            </summary>
            <param name="page">Current page (1-based indexing)</param>
            <param name="pageSize">Number of records per page</param>
            <param name="cancellationToken">Cancellation token for async operations</param>
            <returns>Paginated result containing hotels and metadata</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.DeleteHotel(System.Int32)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetHotelById(System.Int32)">
            <summary>
            Get a hotel by it's id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetHotelByName(System.String)">
            <summary>
            Get a hotel by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.UpdateHotel(System.Int32,Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Update a hotel
            </summary>
            <param name="hotelId"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.AddValueToRedis(System.String,System.String,System.TimeSpan)">
            <summary>
            Add entry to redis
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetValueFromRedis(System.String)">
            <summary>
            Get value from redis if exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.UpsertRedisValue(System.String,System.String,System.TimeSpan)">
            <summary>
            Create new redis entry if not exist, update if already there
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.DeleteRedisEntry(System.String)">
            <summary>
            Delete redis entry by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.AddToRedisList(System.String,System.String)">
            <summary>
            Add value to redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.RemoveFromRedisList(System.String,System.String)">
            <summary>
            Remove value from redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.CheckRedisListContainsValue(System.String,System.String)">
            <summary>
            Check if value exists in redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetListOfValuesByPattern(System.String)">
            <summary>
            Use pattern to get list of values from redis
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetValuesFromRedisList(System.String)">
            <summary>
            Get values from redis list
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetKeysAsync(System.String)">
            <summary>
            Get list of keys from redis using pattern
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
    </members>
</doc>
