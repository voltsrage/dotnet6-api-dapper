<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.API</name>
    </assembly>
    <members>
        <member name="M:Dapper.API.Configure.CreateToken.CreateTokenMethod(System.String,Dapper.API.Models.TokenData)">
            <summary>
            User specific token
            </summary>
            <param name="userId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Configure.CreateToken.CreateTokenMethod(System.String,System.Nullable{System.Int32},Dapper.API.Models.TokenData)">
            <summary>
            Device specific token
            </summary>
            <param name="userId"></param>
            <param name="deviceId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Configure.ICreateToken">
            <summary>
            Interface for token creation and validation operations.
            Provides methods to create, read, and validate JWT tokens for authentication and authorization.
            </summary>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.CreateTokenMethod(System.String,Dapper.API.Models.TokenData)">
            <summary>
            Creates a JWT token for a user with optional custom claims data.
            </summary>
            <param name="userId">The unique identifier of the user for whom the token is created.</param>
            <param name="data">Optional additional data to include in the token claims.</param>
            <returns>A JWT token string that can be used for authentication.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.CreateTokenMethod(System.String,System.Nullable{System.Int32},Dapper.API.Models.TokenData)">
            <summary>
            Creates a JWT token for a user on a specific device with optional custom claims data.
            Useful for scenarios requiring device-specific authentication.
            </summary>
            <param name="userId">The unique identifier of the user for whom the token is created.</param>
            <param name="deviceId">The identifier of the device from which the user is authenticating.</param>
            <param name="data">Optional additional data to include in the token claims.</param>
            <returns>A JWT token string that can be used for authentication.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.GetPrincipal(System.String)">
            <summary>
            Extracts the claims principal from a JWT token.
            This can be used to access the claims within the token for authorization decisions.
            </summary>
            <param name="token">The JWT token string to parse.</param>
            <returns>A ClaimsPrincipal object containing the claims from the token.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.ReadToken(System.String)">
            <summary>
            Decodes a JWT token to access its raw information without validating it.
            </summary>
            <param name="token">The JWT token string to read.</param>
            <returns>A JwtSecurityToken object representing the decoded token.</returns>
        </member>
        <member name="M:Dapper.API.Configure.ICreateToken.ValidateToken(System.String)">
            <summary>
            Validates a JWT token to ensure it is properly signed and not expired.
            </summary>
            <param name="token">The JWT token string to validate.</param>
            <returns>
            A tuple containing:
            - isValid: Boolean indicating if the token is valid
            - userId: The user ID extracted from the token if valid
            </returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotels(System.Int32,System.Int32,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all hotels
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="searchTerm"></param>
            <param name="sortColumn"></param>
            <param name="sortDirection"></param>    
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotelById(System.Int32)">
            <summary>
            Get hotel by id
            </summary>
            <param name="hotelId"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotelsByIds(System.String)">
            <summary>
            Get hotels by ids
            </summary>
            <param name="hotelIds"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.GetHotelByName(System.String)">
            <summary>
            Get hotel by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.AddHotel(Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Create a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.CreateManyAsync(System.Collections.Generic.IEnumerable{Dapper.API.Dtos.Hotels.AddEditHotel})">
            <summary>
            Creates multiple hotels in a single transaction
            </summary>
            <param name="hotels">Collection of hotels to create</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of created hotels with IDs assigned</returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.UpdateHotel(System.Int32,Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Update hotel by id
            </summary>
            <param name="hotelId"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.DeleteHotelById(System.Int32)">
            <summary>
            Delete hotel by id
            </summary>
            <param name="hotelId"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Controllers.HotelsController.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes multiple hotels in a single transaction
            </summary>
            <param name="ids">Collection of hotel IDs to delete</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the bulk delete operation</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.GetRooms(System.Int32,System.Int32,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all rooms
            </summary>
            <param name="page">Page number</param>
            <param name="pageSize">Number of items per page</param>
            <param name="searchTerm">Optional search term</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="sortDirection">Sort direction (asc/desc)</param>    
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.GetRoomById(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get room by id
            </summary>
            <param name="id">The room ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Room if found</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.GetRoomsByHotelId(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get rooms by hotel id
            </summary>
            <param name="hotelId">The hotel ID</param>
            <param name="page">Page number</param>
            <param name="pageSize">Number of items per page</param>
            <param name="searchTerm">Optional search term</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="sortDirection">Sort direction (asc/desc)</param>    
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms for a hotel</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.CreateRoom(Dapper.API.Dtos.Rooms.AddEditRoom,System.Threading.CancellationToken)">
            <summary>
            Create a new room
            </summary>
            <param name="model">Room data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created room with ID assigned</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.UpdateRoom(System.Int32,Dapper.API.Dtos.Rooms.AddEditRoom,System.Threading.CancellationToken)">
            <summary>
            Update an existing room
            </summary>
            <param name="id">The room ID</param>
            <param name="model">Updated room data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Updated room</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.DeleteRoom(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a room
            </summary>
            <param name="id">The room ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if deleted; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.UpdateRoomAvailability(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update room availability status
            </summary>
            <param name="id">The room ID</param>
            <param name="isAvailable">New availability status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if updated; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Controllers.RoomsController.GetRoomTypes(System.Threading.CancellationToken)">
            <summary>
            Get all room types
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of room types</returns>
        </member>
        <member name="M:Dapper.API.Data.Dapper.DapperHandler.QueryMultipleAsync(System.String,Dapper.DynamicParameters,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query that returns multiple result sets
            </summary>
            <param name="sql">The SQL query to execute</param>
            <param name="parameters">The parameters for the query</param>
            <param name="connectionName">Optional connection string name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A grid reader for accessing multiple result sets</returns>
        </member>
        <member name="M:Dapper.API.Data.Dapper.IDapperHandler.QueryMultipleAsync(System.String,Dapper.DynamicParameters,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL query that returns multiple result sets
            </summary>
            <param name="sql">The SQL query to execute</param>
            <param name="param">The parameters for the query</param>
            <param name="conString">Optional connection string name</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>A GridReader for reading multiple result sets</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.AddHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.CreateManyAsync(System.Collections.Generic.IEnumerable{Dapper.API.Entities.HotelEntity},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.DeleteHotel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetAll(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetByIdsAsync(System.Int32[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetHotelById(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetHotelByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.GetHotelByNameAndAddress(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.UpdateHotel(Dapper.API.Entities.HotelEntity)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.HotelRepository.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Dapper.API.Data.Repositories.Interfaces.IHotelRepository">
            <summary>
            Repository Interface for the hotels
            </summary>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.AddHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.CreateManyAsync(System.Collections.Generic.IEnumerable{Dapper.API.Entities.HotelEntity},System.Threading.CancellationToken)">
            <summary>
            Creates multiple hotels in a single transaction
            </summary>
            <param name="hotels">Collection of hotels to create</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created hotels with IDs assigned</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetAll(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets paginated list of hotels
            </summary>
            <param name="pagination"></param>
            <param name="cancellationToken">Cancellation token for async operations</param>
            <returns>Paginated result containing hotels and metadata</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.DeleteHotel(System.Int32)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple hotels in a single transaction
            </summary>
            <param name="ids">Collection of hotel IDs to delete</param>
            <param name="userId">ID of the user performing the delete operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the bulk delete operation</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelById(System.Int32)">
            <summary>
            Get a hotel by it's id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetByIdsAsync(System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Gets hotels by their IDs
            </summary>
            <param name="ids">Collection of hotel IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Found hotels</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelByName(System.String)">
            <summary>
            Get a hotel by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.GetHotelByNameAndAddress(System.String,System.String)">
            <summary>
            Get a hotel by it's name and address for uniqueness
            </summary>
            <param name="name"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IHotelRepository.UpdateHotel(Dapper.API.Entities.HotelEntity)">
            <summary>
            Update a hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Data.Repositories.Interfaces.IRoomRepository">
            <summary>
            Interface for room data access operations
            </summary>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a room by its ID
            </summary>
            <param name="id">The room ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The room if found; otherwise null</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.GetByHotelIdAsync(System.Int32,Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets rooms by hotel ID with optional filtering
            </summary>
            <param name="hotelId">The hotel ID</param>
            <param name="request">Pagination and filtering parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.GetAllAsync(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets all rooms with pagination and filtering
            </summary>
            <param name="request">Pagination and filtering parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.CreateAsync(Dapper.API.Entities.RoomEntity,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new room
            </summary>
            <param name="room">The room to create</param>
            <param name="userId">ID of the user creating the room</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The created room with ID assigned</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.UpdateAsync(Dapper.API.Entities.RoomEntity,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates an existing room
            </summary>
            <param name="id">The room ID to update</param>
            <param name="room">Updated room data</param>
            <param name="userId">ID of the user updating the room</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated room</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a room by setting its status to deleted
            </summary>
            <param name="id">The room ID</param>
            <param name="userId">ID of the user deleting the room</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if deleted; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.UpdateAvailabilityAsync(System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the availability status of a room
            </summary>
            <param name="id">The room ID</param>
            <param name="isAvailable">New availability status</param>
            <param name="userId">ID of the user updating the status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if updated; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Data.Repositories.Interfaces.IRoomRepository.GetRoomTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all room types
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of room types</returns>
        </member>
        <member name="T:Dapper.API.Data.Repositories.RoomRepository">
            <summary>
            Repository implementation for room data access
            </summary>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.GetByHotelIdAsync(System.Int32,Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.GetAllAsync(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.CreateAsync(Dapper.API.Entities.RoomEntity,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.UpdateAsync(Dapper.API.Entities.RoomEntity,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.UpdateAvailabilityAsync(System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Data.Repositories.RoomRepository.GetRoomTypesAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Dapper.API.Dtos.Common.BaseModel">
            <summary>
            Base model for dtos
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.Id">
            <summary>
            Numeric Id of the entity/model
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.EntityStatusId">
            <summary>
            The status of the entity
            1 = Active, 2 = Inactive, 3 = DeletedForEveryone, 4 = Pending, 5 = Archived, 6 = Suspended, 7 = DeletedForMe
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Common.BaseModel.CreatedAt">
            <summary>
            The datetime the record was created
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Hotels.AddEditHotel">
            <summary>
            Use for adding or editing a hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.AddEditHotel.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Hotels.Hotel">
            <summary>
            Represents a hotel data transfer object.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Hotels.Hotel.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Rooms.AddEditRoom">
            <summary>
            Use for adding or editing a room.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.HotelId">
            <summary>
            Gets or sets the unique identifier of the hotel to which the room belongs.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.RoomNumber">
            <summary>
            Gets or sets the room number.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.RoomTypeId">
            <summary>
            Gets or sets the type of the room (e.g., Standard, Deluxe, Suite).
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.PricePerNight">
            <summary>
            Gets or sets the price per night for the room.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.IsAvailable">
            <summary>
            Gets or sets a value indicating whether the room is available.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoom.MaxOccupancy">
            <summary>
            Gets or sets the maximum number of guests that can occupy the room.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Rooms.AddEditRoomType">
            <summary>
            Represents a room type for dropdown lists and selection.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoomType.Name">
            <summary>
            Gets or sets the name of the room type.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.AddEditRoomType.Description">
            <summary>
            Gets or sets the description of the room type.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Rooms.Room">
            <summary>
            Represents a room data transfer object.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.HotelId">
            <summary>
            Gets or sets the unique identifier of the hotel to which the room belongs.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.RoomNumber">
            <summary>
            Gets or sets the room number.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.RoomTypeId">
            <summary>
            Gets or sets the type of the room (e.g., Standard, Deluxe, Suite).
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.RoomTypeName">
            <summary>
            Gets or sets the name of the room type.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.PricePerNight">
            <summary>
            Gets or sets the price per night for the room.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.IsAvailable">
            <summary>
            Gets or sets a value indicating whether the room is available.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.MaxOccupancy">
            <summary>
            Gets or sets the maximum number of guests that can occupy the room.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.Room.HotelName">
            <summary>
            Gets or sets the name of the hotel to which the room belongs.
            </summary>
        </member>
        <member name="T:Dapper.API.Dtos.Rooms.RoomType">
            <summary>
            Represents a room type for dropdown lists and selection.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.RoomType.Name">
            <summary>
            Gets or sets the name of the room type.
            </summary>
        </member>
        <member name="P:Dapper.API.Dtos.Rooms.RoomType.Description">
            <summary>
            Gets or sets the description of the room type.
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.Common.BaseModel">
            <summary>
            Contains common properties for all entities
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.Id">
            <summary>
            Numeric Id of the entity/model
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.EntityStatusId">
            <summary>
            The status of the entity
            1 = Active, 2 = Inactive, 3 = DeletedForEveryone, 4 = Pending, 5 = Archived, 6 = Suspended, 7 = DeletedForMe
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.CreatedAt">
            <summary>
            The datetime the record was created
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.CreatedBy">
            <summary>
            The person who created the record
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.UpdatedAt">
            <summary>
            The datetime the record was updated
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.Common.BaseModel.UpdatedBy">
            <summary>
            The person who last updated the record
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.HotelEntity">
            <summary>
            Represents a hotel entity.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Name">
            <summary>
            Gets or sets the name of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Address">
            <summary>
            Gets or sets the address of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.City">
            <summary>
            Gets or sets the city where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Country">
            <summary>
            Gets or sets the country where the hotel is located.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.PhoneNumber">
            <summary>
            Gets or sets the phone number of the hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.HotelEntity.Email">
            <summary>
            Gets or sets the email address of the hotel.
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.RoomEntity">
            <summary>
            Represents a room in a hotel.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.HotelId">
            <summary>
            Gets or sets the unique identifier of the hotel to which the room belongs.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.RoomNumber">
            <summary>
            Gets or sets the room number.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.RoomTypeId">
            <summary>
            Gets or sets the type of the room (e.g., Standard, Deluxe, Suite).
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.PricePerNight">
            <summary>
            Gets or sets the price per night for the room.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.IsAvailable">
            <summary>
            Gets or sets a value indicating whether the room is available.
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomEntity.MaxOccupancy">
            <summary>
            Gets or sets the maximum number of guests that can occupy the room.
            </summary>
        </member>
        <member name="T:Dapper.API.Entities.RoomTypeEntity">
            <summary>
            Represents a room type in the hotel
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomTypeEntity.Name">
            <summary>
            Name of room type
            </summary>
        </member>
        <member name="P:Dapper.API.Entities.RoomTypeEntity.Description">
            <summary>
            Description of room type
            </summary>
        </member>
        <member name="T:Dapper.API.Enums.StandardEnums.JoinType">
            <summary>
            Types of SQL joins
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.JoinType.Inner">
            <summary>
            INNER JOIN
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.JoinType.Left">
            <summary>
            LEFT JOIN
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.JoinType.Right">
            <summary>
            RIGHT JOIN
            </summary>
        </member>
        <member name="T:Dapper.API.Enums.StandardEnums.RoomType">
            <summary>
            Enumeration of room types in a hotel
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Standard">
            <summary>
            Standard room with basic amenities
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Deluxe">
            <summary>
            Deluxe room with enhanced amenities and comfort
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Suite">
            <summary>
            Suite with separate living area and bedroom
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Executive">
            <summary>
            Executive room with business amenities and services
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Penthouse">
            <summary>
            Penthouse suite, typically on the top floor with premium amenities
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Family">
            <summary>
            Family room with additional space for families
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Accessible">
            <summary>
            Accessible room designed for guests with disabilities
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Single">
            <summary>
            Single room designed for one person
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Double">
            <summary>
            Double room with a queen or king-sized bed
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Twin">
            <summary>
            Twin room with two separate beds
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Presidential">
            <summary>
            Presidential suite, the most luxurious accommodation
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.StandardEnums.RoomType.Villa">
            <summary>
            Villa or cottage separate from the main hotel building
            </summary>
        </member>
        <member name="T:Dapper.API.Enums.SystemCodeEnum">
            <summary>
            Allows developer to create error codes for system logic in a central place
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCreated">
            <summary>
            Hotel created successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelUpdated">
            <summary>
            Hotel updated successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelDeleted">
            <summary>
            Hotel deleted successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelNotFound">
            <summary>
            Hotel not found
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelAlreadyExists">
            <summary>
            Hotel already exists
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidHotelData">
            <summary>
            Invalid hotel data
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelHasActiveRooms">
            <summary>
            Unable to delete hotel with active rooms
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidHotelContactInfo">
            <summary>
            Invalid hotel contact information
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCapacityExceeded">
            <summary>
            Hotel capacity exceeded
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelCreationFailed">
            <summary>
            Hotel creation failed
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.NoHotelsToCreate">
            <summary>
            No hotels to create in bulk
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.HotelBulkCreateValidationError">
            <summary>
            Validation failed for one or more hotels
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomCreated">
            <summary>
            Room created successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomUpdated">
            <summary>
            Room updated successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomDeleted">
            <summary>
            Room deleted successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomStatusChanged">
            <summary>
            Room status changed successfully
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomNotFound">
            <summary>
            Room not found
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomAlreadyExists">
            <summary>
            Room already exists
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidRoomData">
            <summary>
            Invalid room data
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomOccupied">
            <summary>
            Room is currently occupied
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomUnderMaintenance">
            <summary>
            Room is under maintenance
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomCapacityExceeded">
            <summary>
            Room capacity exceeded
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomNotAvailable">
            <summary>
            Room is not available for booking
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.InvalidRoomPrice">
            <summary>
            Invalid room price
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomBelongsToDifferentHotel">
            <summary>
            Room belongs to a different hotel
            </summary>
        </member>
        <member name="F:Dapper.API.Enums.SystemCodeEnum.RoomCreationFailed">
            <summary>
            Room creation failed
            </summary>
        </member>
        <member name="T:Dapper.API.Exceptions.BaseException">
            <summary>
            Base exception for all exceptions 
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.ErrorCode">
            <summary>
            The error code for the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.Component">
            <summary>
            The component that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.Function">
            <summary>
            The function that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.TraceId">
            <summary>
            The trace ID for the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.BaseException.AdditionalData">
            <summary>
            Optional additional data for the exception
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.BaseException.#ctor(System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to create an instance of the AuthBaseException
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="component"></param>
            <param name="function"></param>
            <param name="innerException"></param>
            <param name="additionalData"></param>
        </member>
        <member name="T:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException">
            <summary>
            Exception thrown when data access operations fail at the database level
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.Operation">
            <summary>
            Gets the database operation that failed
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor">
            <summary>
            Initializes a new instance of the DataAccessException class
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataAccessException class with a specified error message
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataAccessException class with operation information
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="operation">The database operation that failed</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataAccessException class with serialized data
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data</param>
            <param name="context">The StreamingContext that contains contextual information</param>
        </member>
        <member name="M:Dapper.API.Exceptions.Scheduler.API.Exceptions.DataAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data</param>
            <param name="context">The StreamingContext that contains contextual information</param>
        </member>
        <member name="T:Dapper.API.Exceptions.FilterException">
            <summary>
            Exception thrown when filtering operations fail
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.FilterException.FilterKey">
            <summary>
            The filter key that caused the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.FilterException.FilterValue">
            <summary>
            The filter value that caused the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.FilterException.FilterOperation">
            <summary>
            The operation being attempted (e.g., 'eq', 'contains', 'in')
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.FilterException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new filter exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="filterKey">Filter key that caused the exception</param>
            <param name="filterValue">Filter value that caused the exception</param>
            <param name="filterOperation">Filter operation that failed</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.InvalidPaginationParametersException">
            <summary>
            Exception thrown when pagination input parameters are invalid
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.InvalidPaginationParametersException.ParameterName">
            <summary>
            The invalid parameter that caused the exception
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.InvalidPaginationParametersException.#ctor(System.String,System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new invalid pagination parameters exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="parameterName">Name of the invalid parameter</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.PaginationDatabaseException">
            <summary>
            Exception thrown when database operations related to pagination fail
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.PaginationDatabaseException.SqlStatement">
            <summary>
            SQL statement that caused the exception (only populated in development)
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.PaginationDatabaseException.#ctor(System.String,System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new pagination database exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="sqlStatement">SQL statement that caused the exception</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.PaginationException">
            <summary>
            Base exception for pagination-related errors
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.PaginationException.Table">
            <summary>
            The table or entity being queried when the exception occurred
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.PaginationException.#ctor(System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new pagination exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.RepositoryException">
            <summary>
            Repository Layer Exceptions
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.RepositoryException.Repository">
            <summary>
            The repository that the exception occurred in
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.RepositoryException.Operation">
            <summary>
            The operation that the exception occurred in
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.RepositoryException.#ctor(System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to create an instance of the RepositoryException
            </summary>
            <param name="message"></param>
            <param name="repository"></param>
            <param name="function"></param>
            <param name="operation"></param>
            <param name="innerException"></param>
            <param name="additionalData"></param>
        </member>
        <member name="T:Dapper.API.Exceptions.SearchException">
            <summary>
            Exception thrown when search operations fail
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.SearchException.SearchTerm">
            <summary>
            The search term that caused the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.SearchException.SearchColumns">
            <summary>
            The columns being searched
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.SearchException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new search exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="searchTerm">Search term that caused the exception</param>
            <param name="searchColumns">Columns being searched</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.SortException">
            <summary>
            Exception thrown when sorting operations fail
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.SortException.SortColumn">
            <summary>
            The sort column that caused the exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.SortException.SortDirection">
            <summary>
            The sort direction
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.SortException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new sort exception
            </summary>
            <param name="message">Exception message</param>
            <param name="component">Component where exception occurred</param>
            <param name="function">Function where exception occurred</param>
            <param name="table">Table being queried</param>
            <param name="sortColumn">Sort column that caused the exception</param>
            <param name="sortDirection">Sort direction</param>
            <param name="innerException">Inner exception if available</param>
            <param name="additionalData">Additional contextual data</param>
        </member>
        <member name="T:Dapper.API.Exceptions.ValidationException">
            <summary>
            Validation exception
            </summary>
        </member>
        <member name="P:Dapper.API.Exceptions.ValidationException.Errors">
            <summary>
            The validation errors
            </summary>
        </member>
        <member name="M:Dapper.API.Exceptions.ValidationException.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Dapper.API.Models.ValidationError},System.Exception)">
            <summary>
            Used to create a new instance of the <see cref="T:Dapper.API.Exceptions.ValidationException"/> class
            </summary>
            <param name="message"></param>
            <param name="validator"></param>
            <param name="function"></param>
            <param name="errors"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Dapper.API.Helpers.DateTimeHelper">
            <summary>
            Helper class for date and time operations
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.GetCurrentTimestamp">
            <summary>
            Converts the current date and time to a Unix timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.TimestampToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp to a DateTime object
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Helpers.DateTimeHelper.FormatDateTimeInvariant(System.DateTime)">
            <summary>
            Formats a DateTime object to a string in the format "yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Helpers.IHelperFunctions">
            <summary>
            Represents the helper functions
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.IHelperFunctions.ProcessValidation``2(FluentValidation.AbstractValidator{``0},``0,Dapper.API.Models.Response{``1})">
            <summary>
            Used for model validation
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="validator"></param>
            <param name="obj"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.#ctor(Dapper.API.Data.Dapper.IDapperHandler,Microsoft.Extensions.Logging.ILogger{Dapper.API.Helpers.PaginationHelper})">
            <summary>
            Creates a new pagination helper
            </summary>
            <param name="dapperHandler"></param>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.GetPaginatedResultAsync``1(Dapper.API.Models.Pagination.PaginationRequest,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets paginated data using a base query with optional search and filters
            </summary>
            <typeparam name="T">Type of entity to retrieve</typeparam>
            <param name="request">Pagination request</param>
            <param name="tableName">Name of the database table</param>
            <param name="columns">Columns to select</param>
            <param name="searchableColumns">Columns to include in search</param>
            <param name="filterableColumns">Dictionary mapping filter keys to column names</param>
            <param name="baseCondition">Base WHERE condition</param>
            <param name="sortColumn">Default sort column</param>
            <param name="sortDirection">Default sort direction</param>
            <returns>Paginated result</returns>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.GetPaginatedDataWithJoinsAsync``1(Dapper.API.Models.Pagination.PaginationRequest,Dapper.API.Helpers.QueryBuilder,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            Gets paginated data with custom joins
            </summary>
            <typeparam name="T">Type of entity to retrieve</typeparam>
            <param name="request">Pagination request</param>
            <param name="queryBuilder">Pre-configured query builder with custom joins</param>
            <returns>Paginated result</returns>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.ApplyFilters(Dapper.API.Helpers.QueryBuilder,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Applies filters to the query builder
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.ApplyFilterWithOperator(Dapper.API.Helpers.QueryBuilder,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Applies a filter with the specified operator
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.PaginationHelper.ExecutePaginatedQueryAsync``1(Dapper.API.Helpers.QueryBuilder,System.Int32,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a paginated query using the provided query builder
            </summary>
        </member>
        <member name="T:Dapper.API.Helpers.QueryBuilder">
            <summary>
            Builder for constructing SQL queries
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dapper.API.Helpers.QueryBuilder.Parameters" -->
        <member name="P:Dapper.API.Helpers.QueryBuilder.HasOrdering">
            <summary>
            Indicates if ordering has been specified
            </summary>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a new query builder
            </summary>
            <param name="baseTable">Base table name</param>
            <param name="baseAlias">Optional alias for base table</param>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.Select(System.String)">
            <summary>
            Specifies columns to select
            </summary>
            <param name="columns">Columns or expressions to select</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.Join(Dapper.API.Enums.StandardEnums.JoinType,System.String,System.String,System.String)">
            <summary>
            Adds a JOIN clause to the query
            </summary>
            <param name="joinType">Type of join</param>
            <param name="table">Table to join</param>
            <param name="alias">Alias for the joined table</param>
            <param name="on">Join condition</param>
            <returns>The builder for method chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.InnerJoin(System.String,System.String,System.String)">
            <summary>
            Adds an INNER JOIN to the query
            </summary>
            <param name="table">Table to join</param>
            <param name="alias">Alias for the joined table</param>
            <param name="on">Join condition</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.LeftJoin(System.String,System.String,System.String)">
            <summary>
            Adds a LEFT JOIN to the query
            </summary>
            <param name="table">Table to join</param>
            <param name="alias">Alias for the joined table</param>
            <param name="on">Join condition</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.RightJoin(System.String,System.String,System.String)">
            <summary>
            Adds a RIGHT JOIN to the query
            </summary>
            <param name="table">Table to join</param>
            <param name="alias">Alias for the joined table</param>
            <param name="on">Join condition</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.Where(System.String)">
            <summary>
            Adds a WHERE condition to the query
            </summary>
            <param name="condition">WHERE condition</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.WithSearch(System.String,System.String[])">
            <summary>
            Adds a search condition across specified columns
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="columns">Columns to search</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.OrderBy(System.String[])">
            <summary>
            Sets the ORDER BY clause
            </summary>
            <param name="columns">Columns to order by</param>
            <returns>The builder for method chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.OrderByDescending(System.String[])">
            <summary>
            Sets the ORDER BY clause with descending direction
            </summary>
            <param name="columns">Columns to order by</param>
            <returns>The builder for method chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.AddParameter(System.String,System.Object)">
            <summary>
            Adds a parameter to the query
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns>The builder for chaining</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.BuildSelectQuery">
            <summary>
            Builds the SELECT query without pagination
            </summary>
            <returns>SQL SELECT query</returns>
        </member>
        <member name="M:Dapper.API.Helpers.QueryBuilder.BuildCountQuery">
            <summary>
            Builds the COUNT query
            </summary>
            <returns>SQL COUNT query</returns>
        </member>
        <member name="T:Dapper.API.Models.BulkDeleteResult">
            <summary>
            Result of a bulk delete operation
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.SuccessfullyDeletedIds">
            <summary>
            IDs of hotels that were successfully deleted
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.NotFoundIds">
            <summary>
            IDs of hotels that were not found
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.FailedIds">
            <summary>
            IDs of hotels that failed to delete with error messages
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.SuccessCount">
            <summary>
            Total number of hotels that were successfully deleted
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.NotFoundCount">
            <summary>
            Total number of hotels that were not found
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.FailedCount">
            <summary>
            Total number of hotels that failed to delete
            </summary>
        </member>
        <member name="P:Dapper.API.Models.BulkDeleteResult.AllSuccessful">
            <summary>
            Indicates whether all requested deletions were successful
            </summary>
        </member>
        <member name="T:Dapper.API.Models.ErrorDetail">
            <summary>
            Provides detailed information about an error that occurred in the application.
            Used for structured error responses in API calls.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Code">
            <summary>
            A unique code identifying the error type, often corresponding to system error codes.
            Can be used for error classification and client-side handling logic.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Message">
            <summary>
            A human-readable description of the error.
            Should be clear and informative without exposing sensitive system details.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Component">
            <summary>
            The component or module where the error occurred.
            Helps in identifying the subsystem responsible for the error.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.Function">
            <summary>
            The specific function or operation that was being performed when the error occurred.
            Provides context for where in the execution flow the error happened.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.AdditionalData">
            <summary>
            A dictionary containing additional context-specific information about the error.
            Can include timestamps, request IDs, or other diagnostic information.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorDetail.ValidationErrors">
            <summary>
            A collection of validation errors when the error is related to invalid input.
            Each error specifies which property failed validation and why.
            Only populated for validation-related errors.
            </summary>
        </member>
        <member name="T:Dapper.API.Models.ErrorResponse">
            <summary>
            Error response model
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ErrorResponse.Error">
            <summary>
            Error details
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Pagination.JoinClause">
            <summary>
            Represents a JOIN clause in a SQL query
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.JoinClause.Type">
            <summary>
            JOIN type (INNER JOIN, LEFT JOIN, etc.)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.JoinClause.Table">
            <summary>
            Table being joined
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.JoinClause.Alias">
            <summary>
            Alias for the joined table
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.JoinClause.Condition">
            <summary>
            JOIN condition
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.JoinClause.JoinTypeString">
            <summary>
            String representation of the join type
            </summary>
        </member>
        <member name="M:Dapper.API.Models.Pagination.JoinClause.#ctor(Dapper.API.Enums.StandardEnums.JoinType,System.String,System.String,System.String)">
            <summary>
            Creates a new JOIN clause
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Pagination.PaginatedResult`1">
            <summary>
            Represents a paginated collection of items with metadata
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
        </member>
        <member name="M:Dapper.API.Models.Pagination.PaginatedResult`1.#ctor(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PaginatedResult class
            </summary>
            <param name="items">The items on the current page</param>
            <param name="totalCount">The total number of items across all pages</param>
            <param name="page">The current page (1-based)</param>
            <param name="pageSize">The number of items per page</param>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.Items">
            <summary>
            The items on the current page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.Page">
            <summary>
            The current page number (1-based)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.PageSize">
            <summary>
            The number of items per page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.TotalCount">
            <summary>
            The total number of items across all pages
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.TotalPages">
            <summary>
            The total number of pages
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.HasNextPage">
            <summary>
            Whether there is a page after the current page
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginatedResult`1.HasPreviousPage">
            <summary>
            Whether there is a page before the current page
            </summary>
        </member>
        <member name="M:Dapper.API.Models.Pagination.PaginatedResult`1.Empty(System.Int32,System.Int32)">
            <summary>
            Creates an empty paged result
            </summary>
            <param name="page">Current page number</param>
            <param name="pageSize">Number of items per page</param>
            <returns>Empty paged result</returns>
        </member>
        <member name="T:Dapper.API.Models.Pagination.PaginationRequest">
            <summary>
            Represents a request for paginated data
            </summary>   
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.Page">
            <summary>
            Current page number (1-based)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.PageSize">
            <summary>
            Number of items per page (default: 10, max: 100)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.SearchTerm">
            <summary>
            Optional search term to filter results
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.Skip">
            <summary>
            Number of records to skip
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.HasSearch">
            <summary>
            Indicates if a search term is provided
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.SortColumn">
            <summary>
            Optional column to sort by
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.SortDirection">
            <summary>
            Sort direction (asc or desc)
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.HasSorting">
            <summary>
            Indicates if sorting is specified
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.IsAscending">
            <summary>
            Indicates if sort direction is ascending
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.Filters">
            <summary>
            Dictionary of field-specific filters
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Pagination.PaginationRequest.HasFilters">
            <summary>
            Indicates whether there are filters specified
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Response">
            <summary>
            Response wrapper for API Endpoints
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.IsSuccess">
            <summary>
            是否成功回傳
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.ErrorMessage">
            <summary>
            IsSuccess為false，顯示錯誤訊息
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.SuccessMessage">
            <summary>
            IsSuccess為true，顯示訊息
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.ErrorCode">
            <summary>
            Custom error code
            </summary>
        </member>
        <member name="P:Dapper.API.Models.Response.StatusCode">
            <summary>
            Http Status Code
            </summary>
        </member>
        <member name="T:Dapper.API.Models.Response`1">
            <summary>
            回傳資料格式，泛型
            </summary>
            <typeparam name="T">資料內容</typeparam>
        </member>
        <member name="P:Dapper.API.Models.Response`1.Content">
            <summary>
            資料內容
            </summary>
        </member>
        <member name="T:Dapper.API.Models.TokenData">
            <summary>
            Properties returned in the token
            </summary>
        </member>
        <member name="P:Dapper.API.Models.TokenData.Email">
            <summary>
            Gets or sets the user's email address. This is often used as the username for login.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.TokenData.AdditionalProperties">
            <summary>
            Adtional properties that can be added to the token.
            </summary>
        </member>
        <member name="T:Dapper.API.Models.ValidationError">
            <summary>
            Represents a validation error for a specific property in a model or entity.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.Property">
            <summary>
            The name of the property that failed validation.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.Error">
            <summary>
            The validation error message describing why the property is invalid.
            </summary>
        </member>
        <member name="P:Dapper.API.Models.ValidationError.AttemptedValue">
            <summary>
            The value that was attempted to be assigned to the property but failed validation.
            This helps in debugging by showing what was actually submitted.
            </summary>
        </member>
        <member name="M:Dapper.API.Services.HotelService.AddHotel(Dapper.API.Dtos.Hotels.AddEditHotel)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.CreateManyAsync(System.Collections.Generic.IEnumerable{Dapper.API.Dtos.Hotels.AddEditHotel},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.DeleteHotel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.GetAll(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.GetByIdsAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.GetHotelById(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.GetHotelByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dapper.API.Services.HotelService.UpdateHotel(System.Int32,Dapper.API.Dtos.Hotels.AddEditHotel)">
            <inheritdoc/>
        </member>
        <member name="T:Dapper.API.Services.Interfaces.IHotelService">
            <summary>
            Hotel Service Interface
            </summary>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.AddHotel(Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Add a new hotel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.CreateManyAsync(System.Collections.Generic.IEnumerable{Dapper.API.Dtos.Hotels.AddEditHotel},System.Threading.CancellationToken)">
            <summary>
            Creates multiple hotels in a single transaction
            </summary>
            <param name="hotels">Collection of hotels to create</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created hotels with IDs assigned</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetAll(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets paginated list of hotels
            </summary>
            <param name="pagination"></param>
            <param name="cancellationToken">Cancellation token for async operations</param>
            <returns>Paginated result containing hotels and metadata</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.DeleteHotel(System.Int32)">
            <summary>
            Delete a hotel
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.DeleteManyAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Deletes multiple hotels in a single transaction
            </summary>
            <param name="ids">Collection of hotel IDs to delete</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the bulk delete operation</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetHotelById(System.Int32)">
            <summary>
            Get a hotel by it's id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetByIdsAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets hotels by their IDs
            </summary>
            <param name="ids">Collection of hotel IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Found hotels</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.GetHotelByName(System.String)">
            <summary>
            Get a hotel by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IHotelService.UpdateHotel(System.Int32,Dapper.API.Dtos.Hotels.AddEditHotel)">
            <summary>
            Update a hotel
            </summary>
            <param name="hotelId"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.AddValueToRedis(System.String,System.String,System.TimeSpan)">
            <summary>
            Add entry to redis
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetValueFromRedis(System.String)">
            <summary>
            Get value from redis if exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.UpsertRedisValue(System.String,System.String,System.TimeSpan)">
            <summary>
            Create new redis entry if not exist, update if already there
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiryTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.DeleteRedisEntry(System.String)">
            <summary>
            Delete redis entry by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.AddToRedisList(System.String,System.String)">
            <summary>
            Add value to redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.RemoveFromRedisList(System.String,System.String)">
            <summary>
            Remove value from redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.CheckRedisListContainsValue(System.String,System.String)">
            <summary>
            Check if value exists in redis list
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetListOfValuesByPattern(System.String)">
            <summary>
            Use pattern to get list of values from redis
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetValuesFromRedisList(System.String)">
            <summary>
            Get values from redis list
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRedisService.GetKeysAsync(System.String)">
            <summary>
            Get list of keys from redis using pattern
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.API.Services.Interfaces.IRoomService">
            <summary>
            Interface for room management operations
            </summary>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a room by its ID
            </summary>
            <param name="id">The room ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The room if found; otherwise null</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.GetByHotelIdAsync(System.Int32,Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets rooms by hotel ID with pagination and filtering
            </summary>
            <param name="hotelId">The hotel ID</param>
            <param name="request">Pagination and filtering parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.GetAllAsync(Dapper.API.Models.Pagination.PaginationRequest,System.Threading.CancellationToken)">
            <summary>
            Gets all rooms with pagination and filtering
            </summary>
            <param name="request">Pagination and filtering parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of rooms</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.CreateAsync(Dapper.API.Dtos.Rooms.AddEditRoom,System.Threading.CancellationToken)">
            <summary>
            Creates a new room
            </summary>
            <param name="room">The room to create</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The created room with ID assigned</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.UpdateAsync(System.Int32,Dapper.API.Dtos.Rooms.AddEditRoom,System.Threading.CancellationToken)">
            <summary>
            Updates an existing room
            </summary>
            <param name="id">The room ID to update</param>
            <param name="room">Updated room data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated room</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a room
            </summary>
            <param name="id">The room ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if deleted; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.UpdateAvailabilityAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates the availability status of a room
            </summary>
            <param name="id">The room ID</param>
            <param name="isAvailable">New availability status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if updated; otherwise false</returns>
        </member>
        <member name="M:Dapper.API.Services.Interfaces.IRoomService.GetRoomTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all room types
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of room types</returns>
        </member>
    </members>
</doc>
